                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_uart1
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_GetClockFreq
                                     12 	.globl _UART1_DeInit
                                     13 	.globl _UART1_Init
                                     14 	.globl _UART1_Cmd
                                     15 	.globl _UART1_ITConfig
                                     16 	.globl _UART1_ReceiveData8
                                     17 	.globl _UART1_SendData8
                                     18 	.globl _UART1_GetFlagStatus
                                     19 	.globl _UART1_GetITStatus
                                     20 	.globl _UART1_ClearITPendingBit
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DATA
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area INITIALIZED
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DABS (ABS)
                                     33 
                                     34 ; default segment ordering for linker
                                     35 	.area HOME
                                     36 	.area GSINIT
                                     37 	.area GSFINAL
                                     38 	.area CONST
                                     39 	.area INITIALIZER
                                     40 	.area CODE
                                     41 
                                     42 ;--------------------------------------------------------
                                     43 ; global & static initialisations
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area GSINIT
                                     47 	.area GSFINAL
                                     48 	.area GSINIT
                                     49 ;--------------------------------------------------------
                                     50 ; Home
                                     51 ;--------------------------------------------------------
                                     52 	.area HOME
                                     53 	.area HOME
                                     54 ;--------------------------------------------------------
                                     55 ; code
                                     56 ;--------------------------------------------------------
                                     57 	.area CODE
                                     58 ;	Source/Std_Lib/Src/stm8s_uart1.c: 53: void UART1_DeInit(void)
                                     59 ;	-----------------------------------------
                                     60 ;	 function UART1_DeInit
                                     61 ;	-----------------------------------------
      000000                         62 _UART1_DeInit:
                                     63 ;	Source/Std_Lib/Src/stm8s_uart1.c: 57: (void)UART1->SR;
      000000 C6 52 30         [ 1]   64 	ld	a, 0x5230
                                     65 ;	Source/Std_Lib/Src/stm8s_uart1.c: 58: (void)UART1->DR;
      000003 C6 52 31         [ 1]   66 	ld	a, 0x5231
                                     67 ;	Source/Std_Lib/Src/stm8s_uart1.c: 60: UART1->BRR2 = UART1_BRR2_RESET_VALUE;  /* Set UART1_BRR2 to reset value 0x00 */
      000006 35 00 52 33      [ 1]   68 	mov	0x5233+0, #0x00
                                     69 ;	Source/Std_Lib/Src/stm8s_uart1.c: 61: UART1->BRR1 = UART1_BRR1_RESET_VALUE;  /* Set UART1_BRR1 to reset value 0x00 */
      00000A 35 00 52 32      [ 1]   70 	mov	0x5232+0, #0x00
                                     71 ;	Source/Std_Lib/Src/stm8s_uart1.c: 63: UART1->CR1 = UART1_CR1_RESET_VALUE;  /* Set UART1_CR1 to reset value 0x00 */
      00000E 35 00 52 34      [ 1]   72 	mov	0x5234+0, #0x00
                                     73 ;	Source/Std_Lib/Src/stm8s_uart1.c: 64: UART1->CR2 = UART1_CR2_RESET_VALUE;  /* Set UART1_CR2 to reset value 0x00 */
      000012 35 00 52 35      [ 1]   74 	mov	0x5235+0, #0x00
                                     75 ;	Source/Std_Lib/Src/stm8s_uart1.c: 65: UART1->CR3 = UART1_CR3_RESET_VALUE;  /* Set UART1_CR3 to reset value 0x00 */
      000016 35 00 52 36      [ 1]   76 	mov	0x5236+0, #0x00
                                     77 ;	Source/Std_Lib/Src/stm8s_uart1.c: 66: UART1->CR4 = UART1_CR4_RESET_VALUE;  /* Set UART1_CR4 to reset value 0x00 */
      00001A 35 00 52 37      [ 1]   78 	mov	0x5237+0, #0x00
                                     79 ;	Source/Std_Lib/Src/stm8s_uart1.c: 67: UART1->CR5 = UART1_CR5_RESET_VALUE;  /* Set UART1_CR5 to reset value 0x00 */
      00001E 35 00 52 38      [ 1]   80 	mov	0x5238+0, #0x00
                                     81 ;	Source/Std_Lib/Src/stm8s_uart1.c: 69: UART1->GTR = UART1_GTR_RESET_VALUE;
      000022 35 00 52 39      [ 1]   82 	mov	0x5239+0, #0x00
                                     83 ;	Source/Std_Lib/Src/stm8s_uart1.c: 70: UART1->PSCR = UART1_PSCR_RESET_VALUE;
      000026 35 00 52 3A      [ 1]   84 	mov	0x523a+0, #0x00
                                     85 ;	Source/Std_Lib/Src/stm8s_uart1.c: 71: }
      00002A 81               [ 4]   86 	ret
                                     87 ;	Source/Std_Lib/Src/stm8s_uart1.c: 90: void UART1_Init(uint32_t BaudRate, UART1_WordLength_TypeDef WordLength, 
                                     88 ;	-----------------------------------------
                                     89 ;	 function UART1_Init
                                     90 ;	-----------------------------------------
      00002B                         91 _UART1_Init:
      00002B 52 11            [ 2]   92 	sub	sp, #17
                                     93 ;	Source/Std_Lib/Src/stm8s_uart1.c: 105: UART1->CR1 &= (uint8_t)(~UART1_CR1_M);  
      00002D 72 19 52 34      [ 1]   94 	bres	21044, #4
                                     95 ;	Source/Std_Lib/Src/stm8s_uart1.c: 108: UART1->CR1 |= (uint8_t)WordLength;
      000031 C6 52 34         [ 1]   96 	ld	a, 0x5234
      000034 1A 18            [ 1]   97 	or	a, (0x18, sp)
      000036 C7 52 34         [ 1]   98 	ld	0x5234, a
                                     99 ;	Source/Std_Lib/Src/stm8s_uart1.c: 111: UART1->CR3 &= (uint8_t)(~UART1_CR3_STOP);  
      000039 C6 52 36         [ 1]  100 	ld	a, 0x5236
      00003C A4 CF            [ 1]  101 	and	a, #0xcf
      00003E C7 52 36         [ 1]  102 	ld	0x5236, a
                                    103 ;	Source/Std_Lib/Src/stm8s_uart1.c: 113: UART1->CR3 |= (uint8_t)StopBits;  
      000041 C6 52 36         [ 1]  104 	ld	a, 0x5236
      000044 1A 19            [ 1]  105 	or	a, (0x19, sp)
      000046 C7 52 36         [ 1]  106 	ld	0x5236, a
                                    107 ;	Source/Std_Lib/Src/stm8s_uart1.c: 116: UART1->CR1 &= (uint8_t)(~(UART1_CR1_PCEN | UART1_CR1_PS  ));  
      000049 C6 52 34         [ 1]  108 	ld	a, 0x5234
      00004C A4 F9            [ 1]  109 	and	a, #0xf9
      00004E C7 52 34         [ 1]  110 	ld	0x5234, a
                                    111 ;	Source/Std_Lib/Src/stm8s_uart1.c: 118: UART1->CR1 |= (uint8_t)Parity;  
      000051 C6 52 34         [ 1]  112 	ld	a, 0x5234
      000054 1A 1A            [ 1]  113 	or	a, (0x1a, sp)
      000056 C7 52 34         [ 1]  114 	ld	0x5234, a
                                    115 ;	Source/Std_Lib/Src/stm8s_uart1.c: 121: UART1->BRR1 &= (uint8_t)(~UART1_BRR1_DIVM);  
      000059 C6 52 32         [ 1]  116 	ld	a, 0x5232
      00005C 35 00 52 32      [ 1]  117 	mov	0x5232+0, #0x00
                                    118 ;	Source/Std_Lib/Src/stm8s_uart1.c: 123: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVM);  
      000060 C6 52 33         [ 1]  119 	ld	a, 0x5233
      000063 A4 0F            [ 1]  120 	and	a, #0x0f
      000065 C7 52 33         [ 1]  121 	ld	0x5233, a
                                    122 ;	Source/Std_Lib/Src/stm8s_uart1.c: 125: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVF);  
      000068 C6 52 33         [ 1]  123 	ld	a, 0x5233
      00006B A4 F0            [ 1]  124 	and	a, #0xf0
      00006D C7 52 33         [ 1]  125 	ld	0x5233, a
                                    126 ;	Source/Std_Lib/Src/stm8s_uart1.c: 128: BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
      000070 CDr00r00         [ 4]  127 	call	_CLK_GetClockFreq
      000073 1F 10            [ 2]  128 	ldw	(0x10, sp), x
      000075 1E 14            [ 2]  129 	ldw	x, (0x14, sp)
      000077 1F 0A            [ 2]  130 	ldw	(0x0a, sp), x
      000079 1E 16            [ 2]  131 	ldw	x, (0x16, sp)
      00007B A6 04            [ 1]  132 	ld	a, #0x04
      00007D                        133 00127$:
      00007D 58               [ 2]  134 	sllw	x
      00007E 09 0B            [ 1]  135 	rlc	(0x0b, sp)
      000080 09 0A            [ 1]  136 	rlc	(0x0a, sp)
      000082 4A               [ 1]  137 	dec	a
      000083 26 F8            [ 1]  138 	jrne	00127$
      000085 1F 0C            [ 2]  139 	ldw	(0x0c, sp), x
      000087 89               [ 2]  140 	pushw	x
      000088 1E 0C            [ 2]  141 	ldw	x, (0x0c, sp)
      00008A 89               [ 2]  142 	pushw	x
      00008B 1E 14            [ 2]  143 	ldw	x, (0x14, sp)
      00008D 89               [ 2]  144 	pushw	x
      00008E 90 89            [ 2]  145 	pushw	y
      000090 CDr00r00         [ 4]  146 	call	__divulong
      000093 5B 08            [ 2]  147 	addw	sp, #8
      000095 1F 10            [ 2]  148 	ldw	(0x10, sp), x
      000097 17 0E            [ 2]  149 	ldw	(0x0e, sp), y
      000099 16 10            [ 2]  150 	ldw	y, (0x10, sp)
      00009B 17 03            [ 2]  151 	ldw	(0x03, sp), y
      00009D 16 0E            [ 2]  152 	ldw	y, (0x0e, sp)
      00009F 17 01            [ 2]  153 	ldw	(0x01, sp), y
                                    154 ;	Source/Std_Lib/Src/stm8s_uart1.c: 129: BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
      0000A1 CDr00r00         [ 4]  155 	call	_CLK_GetClockFreq
      0000A4 1F 10            [ 2]  156 	ldw	(0x10, sp), x
      0000A6 17 0E            [ 2]  157 	ldw	(0x0e, sp), y
      0000A8 1E 10            [ 2]  158 	ldw	x, (0x10, sp)
      0000AA 89               [ 2]  159 	pushw	x
      0000AB 1E 10            [ 2]  160 	ldw	x, (0x10, sp)
      0000AD 89               [ 2]  161 	pushw	x
      0000AE 4B 64            [ 1]  162 	push	#0x64
      0000B0 5F               [ 1]  163 	clrw	x
      0000B1 89               [ 2]  164 	pushw	x
      0000B2 4B 00            [ 1]  165 	push	#0x00
      0000B4 CDr00r00         [ 4]  166 	call	__mullong
      0000B7 5B 08            [ 2]  167 	addw	sp, #8
      0000B9 1F 10            [ 2]  168 	ldw	(0x10, sp), x
      0000BB 1E 0C            [ 2]  169 	ldw	x, (0x0c, sp)
      0000BD 89               [ 2]  170 	pushw	x
      0000BE 1E 0C            [ 2]  171 	ldw	x, (0x0c, sp)
      0000C0 89               [ 2]  172 	pushw	x
      0000C1 1E 14            [ 2]  173 	ldw	x, (0x14, sp)
      0000C3 89               [ 2]  174 	pushw	x
      0000C4 90 89            [ 2]  175 	pushw	y
      0000C6 CDr00r00         [ 4]  176 	call	__divulong
      0000C9 5B 08            [ 2]  177 	addw	sp, #8
      0000CB 1F 07            [ 2]  178 	ldw	(0x07, sp), x
      0000CD 17 05            [ 2]  179 	ldw	(0x05, sp), y
                                    180 ;	Source/Std_Lib/Src/stm8s_uart1.c: 131: UART1->BRR2 |= (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100)) << 4) / 100) & (uint8_t)0x0F); 
      0000CF C6 52 33         [ 1]  181 	ld	a, 0x5233
      0000D2 6B 09            [ 1]  182 	ld	(0x09, sp), a
      0000D4 1E 03            [ 2]  183 	ldw	x, (0x03, sp)
      0000D6 89               [ 2]  184 	pushw	x
      0000D7 1E 03            [ 2]  185 	ldw	x, (0x03, sp)
      0000D9 89               [ 2]  186 	pushw	x
      0000DA 4B 64            [ 1]  187 	push	#0x64
      0000DC 5F               [ 1]  188 	clrw	x
      0000DD 89               [ 2]  189 	pushw	x
      0000DE 4B 00            [ 1]  190 	push	#0x00
      0000E0 CDr00r00         [ 4]  191 	call	__mullong
      0000E3 5B 08            [ 2]  192 	addw	sp, #8
      0000E5 1F 0C            [ 2]  193 	ldw	(0x0c, sp), x
      0000E7 17 0A            [ 2]  194 	ldw	(0x0a, sp), y
      0000E9 1E 07            [ 2]  195 	ldw	x, (0x07, sp)
      0000EB 72 F0 0C         [ 2]  196 	subw	x, (0x0c, sp)
      0000EE 1F 10            [ 2]  197 	ldw	(0x10, sp), x
      0000F0 7B 06            [ 1]  198 	ld	a, (0x06, sp)
      0000F2 12 0B            [ 1]  199 	sbc	a, (0x0b, sp)
      0000F4 6B 0F            [ 1]  200 	ld	(0x0f, sp), a
      0000F6 7B 05            [ 1]  201 	ld	a, (0x05, sp)
      0000F8 12 0A            [ 1]  202 	sbc	a, (0x0a, sp)
      0000FA 6B 0E            [ 1]  203 	ld	(0x0e, sp), a
      0000FC 1E 10            [ 2]  204 	ldw	x, (0x10, sp)
      0000FE 16 0E            [ 2]  205 	ldw	y, (0x0e, sp)
      000100 A6 04            [ 1]  206 	ld	a, #0x04
      000102                        207 00129$:
      000102 58               [ 2]  208 	sllw	x
      000103 90 59            [ 2]  209 	rlcw	y
      000105 4A               [ 1]  210 	dec	a
      000106 26 FA            [ 1]  211 	jrne	00129$
      000108 4B 64            [ 1]  212 	push	#0x64
      00010A 4B 00            [ 1]  213 	push	#0x00
      00010C 4B 00            [ 1]  214 	push	#0x00
      00010E 4B 00            [ 1]  215 	push	#0x00
      000110 89               [ 2]  216 	pushw	x
      000111 90 89            [ 2]  217 	pushw	y
      000113 CDr00r00         [ 4]  218 	call	__divulong
      000116 5B 08            [ 2]  219 	addw	sp, #8
      000118 9F               [ 1]  220 	ld	a, xl
      000119 A4 0F            [ 1]  221 	and	a, #0x0f
      00011B 1A 09            [ 1]  222 	or	a, (0x09, sp)
      00011D C7 52 33         [ 1]  223 	ld	0x5233, a
                                    224 ;	Source/Std_Lib/Src/stm8s_uart1.c: 133: UART1->BRR2 |= (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0); 
      000120 C6 52 33         [ 1]  225 	ld	a, 0x5233
      000123 6B 11            [ 1]  226 	ld	(0x11, sp), a
      000125 1E 03            [ 2]  227 	ldw	x, (0x03, sp)
      000127 A6 10            [ 1]  228 	ld	a, #0x10
      000129 62               [ 2]  229 	div	x, a
      00012A 9F               [ 1]  230 	ld	a, xl
      00012B A4 F0            [ 1]  231 	and	a, #0xf0
      00012D 1A 11            [ 1]  232 	or	a, (0x11, sp)
      00012F C7 52 33         [ 1]  233 	ld	0x5233, a
                                    234 ;	Source/Std_Lib/Src/stm8s_uart1.c: 135: UART1->BRR1 |= (uint8_t)BaudRate_Mantissa;           
      000132 C6 52 32         [ 1]  235 	ld	a, 0x5232
      000135 6B 11            [ 1]  236 	ld	(0x11, sp), a
      000137 7B 04            [ 1]  237 	ld	a, (0x04, sp)
      000139 1A 11            [ 1]  238 	or	a, (0x11, sp)
      00013B C7 52 32         [ 1]  239 	ld	0x5232, a
                                    240 ;	Source/Std_Lib/Src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      00013E C6 52 35         [ 1]  241 	ld	a, 0x5235
      000141 A4 F3            [ 1]  242 	and	a, #0xf3
      000143 C7 52 35         [ 1]  243 	ld	0x5235, a
                                    244 ;	Source/Std_Lib/Src/stm8s_uart1.c: 140: UART1->CR3 &= (uint8_t)~(UART1_CR3_CPOL | UART1_CR3_CPHA | UART1_CR3_LBCL); 
      000146 C6 52 36         [ 1]  245 	ld	a, 0x5236
      000149 A4 F8            [ 1]  246 	and	a, #0xf8
      00014B C7 52 36         [ 1]  247 	ld	0x5236, a
                                    248 ;	Source/Std_Lib/Src/stm8s_uart1.c: 142: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & (uint8_t)(UART1_CR3_CPOL | 
      00014E C6 52 36         [ 1]  249 	ld	a, 0x5236
      000151 6B 11            [ 1]  250 	ld	(0x11, sp), a
      000153 7B 1B            [ 1]  251 	ld	a, (0x1b, sp)
      000155 A4 07            [ 1]  252 	and	a, #0x07
      000157 1A 11            [ 1]  253 	or	a, (0x11, sp)
      000159 C7 52 36         [ 1]  254 	ld	0x5236, a
                                    255 ;	Source/Std_Lib/Src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      00015C C6 52 35         [ 1]  256 	ld	a, 0x5235
                                    257 ;	Source/Std_Lib/Src/stm8s_uart1.c: 145: if ((uint8_t)(Mode & UART1_MODE_TX_ENABLE))
      00015F 88               [ 1]  258 	push	a
      000160 7B 1D            [ 1]  259 	ld	a, (0x1d, sp)
      000162 A5 04            [ 1]  260 	bcp	a, #0x04
      000164 84               [ 1]  261 	pop	a
      000165 27 07            [ 1]  262 	jreq	00102$
                                    263 ;	Source/Std_Lib/Src/stm8s_uart1.c: 148: UART1->CR2 |= (uint8_t)UART1_CR2_TEN;  
      000167 AA 08            [ 1]  264 	or	a, #0x08
      000169 C7 52 35         [ 1]  265 	ld	0x5235, a
      00016C 20 05            [ 2]  266 	jra	00103$
      00016E                        267 00102$:
                                    268 ;	Source/Std_Lib/Src/stm8s_uart1.c: 153: UART1->CR2 &= (uint8_t)(~UART1_CR2_TEN);  
      00016E A4 F7            [ 1]  269 	and	a, #0xf7
      000170 C7 52 35         [ 1]  270 	ld	0x5235, a
      000173                        271 00103$:
                                    272 ;	Source/Std_Lib/Src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      000173 C6 52 35         [ 1]  273 	ld	a, 0x5235
                                    274 ;	Source/Std_Lib/Src/stm8s_uart1.c: 155: if ((uint8_t)(Mode & UART1_MODE_RX_ENABLE))
      000176 88               [ 1]  275 	push	a
      000177 7B 1D            [ 1]  276 	ld	a, (0x1d, sp)
      000179 A5 08            [ 1]  277 	bcp	a, #0x08
      00017B 84               [ 1]  278 	pop	a
      00017C 27 07            [ 1]  279 	jreq	00105$
                                    280 ;	Source/Std_Lib/Src/stm8s_uart1.c: 158: UART1->CR2 |= (uint8_t)UART1_CR2_REN;  
      00017E AA 04            [ 1]  281 	or	a, #0x04
      000180 C7 52 35         [ 1]  282 	ld	0x5235, a
      000183 20 05            [ 2]  283 	jra	00106$
      000185                        284 00105$:
                                    285 ;	Source/Std_Lib/Src/stm8s_uart1.c: 163: UART1->CR2 &= (uint8_t)(~UART1_CR2_REN);  
      000185 A4 FB            [ 1]  286 	and	a, #0xfb
      000187 C7 52 35         [ 1]  287 	ld	0x5235, a
      00018A                        288 00106$:
                                    289 ;	Source/Std_Lib/Src/stm8s_uart1.c: 111: UART1->CR3 &= (uint8_t)(~UART1_CR3_STOP);  
      00018A C6 52 36         [ 1]  290 	ld	a, 0x5236
                                    291 ;	Source/Std_Lib/Src/stm8s_uart1.c: 167: if ((uint8_t)(SyncMode & UART1_SYNCMODE_CLOCK_DISABLE))
      00018D 0D 1B            [ 1]  292 	tnz	(0x1b, sp)
      00018F 2A 07            [ 1]  293 	jrpl	00108$
                                    294 ;	Source/Std_Lib/Src/stm8s_uart1.c: 170: UART1->CR3 &= (uint8_t)(~UART1_CR3_CKEN); 
      000191 A4 F7            [ 1]  295 	and	a, #0xf7
      000193 C7 52 36         [ 1]  296 	ld	0x5236, a
      000196 20 0D            [ 2]  297 	jra	00110$
      000198                        298 00108$:
                                    299 ;	Source/Std_Lib/Src/stm8s_uart1.c: 174: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & UART1_CR3_CKEN);
      000198 88               [ 1]  300 	push	a
      000199 7B 1C            [ 1]  301 	ld	a, (0x1c, sp)
      00019B A4 08            [ 1]  302 	and	a, #0x08
      00019D 6B 12            [ 1]  303 	ld	(0x12, sp), a
      00019F 84               [ 1]  304 	pop	a
      0001A0 1A 11            [ 1]  305 	or	a, (0x11, sp)
      0001A2 C7 52 36         [ 1]  306 	ld	0x5236, a
      0001A5                        307 00110$:
                                    308 ;	Source/Std_Lib/Src/stm8s_uart1.c: 176: }
      0001A5 5B 11            [ 2]  309 	addw	sp, #17
      0001A7 81               [ 4]  310 	ret
                                    311 ;	Source/Std_Lib/Src/stm8s_uart1.c: 184: void UART1_Cmd(FunctionalState NewState)
                                    312 ;	-----------------------------------------
                                    313 ;	 function UART1_Cmd
                                    314 ;	-----------------------------------------
      0001A8                        315 _UART1_Cmd:
                                    316 ;	Source/Std_Lib/Src/stm8s_uart1.c: 189: UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
      0001A8 C6 52 34         [ 1]  317 	ld	a, 0x5234
                                    318 ;	Source/Std_Lib/Src/stm8s_uart1.c: 186: if (NewState != DISABLE)
      0001AB 0D 03            [ 1]  319 	tnz	(0x03, sp)
      0001AD 27 06            [ 1]  320 	jreq	00102$
                                    321 ;	Source/Std_Lib/Src/stm8s_uart1.c: 189: UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
      0001AF A4 DF            [ 1]  322 	and	a, #0xdf
      0001B1 C7 52 34         [ 1]  323 	ld	0x5234, a
      0001B4 81               [ 4]  324 	ret
      0001B5                        325 00102$:
                                    326 ;	Source/Std_Lib/Src/stm8s_uart1.c: 194: UART1->CR1 |= UART1_CR1_UARTD;  
      0001B5 AA 20            [ 1]  327 	or	a, #0x20
      0001B7 C7 52 34         [ 1]  328 	ld	0x5234, a
                                    329 ;	Source/Std_Lib/Src/stm8s_uart1.c: 196: }
      0001BA 81               [ 4]  330 	ret
                                    331 ;	Source/Std_Lib/Src/stm8s_uart1.c: 211: void UART1_ITConfig(UART1_IT_TypeDef UART1_IT, FunctionalState NewState)
                                    332 ;	-----------------------------------------
                                    333 ;	 function UART1_ITConfig
                                    334 ;	-----------------------------------------
      0001BB                        335 _UART1_ITConfig:
      0001BB 89               [ 2]  336 	pushw	x
                                    337 ;	Source/Std_Lib/Src/stm8s_uart1.c: 220: uartreg = (uint8_t)((uint16_t)UART1_IT >> 0x08);
      0001BC 1E 05            [ 2]  338 	ldw	x, (0x05, sp)
                                    339 ;	Source/Std_Lib/Src/stm8s_uart1.c: 222: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0001BE 7B 06            [ 1]  340 	ld	a, (0x06, sp)
      0001C0 A4 0F            [ 1]  341 	and	a, #0x0f
      0001C2 88               [ 1]  342 	push	a
      0001C3 A6 01            [ 1]  343 	ld	a, #0x01
      0001C5 6B 03            [ 1]  344 	ld	(0x03, sp), a
      0001C7 84               [ 1]  345 	pop	a
      0001C8 4D               [ 1]  346 	tnz	a
      0001C9 27 05            [ 1]  347 	jreq	00144$
      0001CB                        348 00143$:
      0001CB 08 02            [ 1]  349 	sll	(0x02, sp)
      0001CD 4A               [ 1]  350 	dec	a
      0001CE 26 FB            [ 1]  351 	jrne	00143$
      0001D0                        352 00144$:
                                    353 ;	Source/Std_Lib/Src/stm8s_uart1.c: 227: if (uartreg == 0x01)
      0001D0 9E               [ 1]  354 	ld	a, xh
      0001D1 4A               [ 1]  355 	dec	a
      0001D2 26 05            [ 1]  356 	jrne	00146$
      0001D4 A6 01            [ 1]  357 	ld	a, #0x01
      0001D6 6B 01            [ 1]  358 	ld	(0x01, sp), a
      0001D8 C5                     359 	.byte 0xc5
      0001D9                        360 00146$:
      0001D9 0F 01            [ 1]  361 	clr	(0x01, sp)
      0001DB                        362 00147$:
                                    363 ;	Source/Std_Lib/Src/stm8s_uart1.c: 231: else if (uartreg == 0x02)
      0001DB 9E               [ 1]  364 	ld	a, xh
      0001DC A0 02            [ 1]  365 	sub	a, #0x02
      0001DE 26 02            [ 1]  366 	jrne	00149$
      0001E0 4C               [ 1]  367 	inc	a
      0001E1 21                     368 	.byte 0x21
      0001E2                        369 00149$:
      0001E2 4F               [ 1]  370 	clr	a
      0001E3                        371 00150$:
                                    372 ;	Source/Std_Lib/Src/stm8s_uart1.c: 224: if (NewState != DISABLE)
      0001E3 0D 07            [ 1]  373 	tnz	(0x07, sp)
      0001E5 27 25            [ 1]  374 	jreq	00114$
                                    375 ;	Source/Std_Lib/Src/stm8s_uart1.c: 227: if (uartreg == 0x01)
      0001E7 0D 01            [ 1]  376 	tnz	(0x01, sp)
      0001E9 27 0A            [ 1]  377 	jreq	00105$
                                    378 ;	Source/Std_Lib/Src/stm8s_uart1.c: 229: UART1->CR1 |= itpos;
      0001EB C6 52 34         [ 1]  379 	ld	a, 0x5234
      0001EE 1A 02            [ 1]  380 	or	a, (0x02, sp)
      0001F0 C7 52 34         [ 1]  381 	ld	0x5234, a
      0001F3 20 3C            [ 2]  382 	jra	00116$
      0001F5                        383 00105$:
                                    384 ;	Source/Std_Lib/Src/stm8s_uart1.c: 231: else if (uartreg == 0x02)
      0001F5 4D               [ 1]  385 	tnz	a
      0001F6 27 0A            [ 1]  386 	jreq	00102$
                                    387 ;	Source/Std_Lib/Src/stm8s_uart1.c: 233: UART1->CR2 |= itpos;
      0001F8 C6 52 35         [ 1]  388 	ld	a, 0x5235
      0001FB 1A 02            [ 1]  389 	or	a, (0x02, sp)
      0001FD C7 52 35         [ 1]  390 	ld	0x5235, a
      000200 20 2F            [ 2]  391 	jra	00116$
      000202                        392 00102$:
                                    393 ;	Source/Std_Lib/Src/stm8s_uart1.c: 237: UART1->CR4 |= itpos;
      000202 C6 52 37         [ 1]  394 	ld	a, 0x5237
      000205 1A 02            [ 1]  395 	or	a, (0x02, sp)
      000207 C7 52 37         [ 1]  396 	ld	0x5237, a
      00020A 20 25            [ 2]  397 	jra	00116$
      00020C                        398 00114$:
                                    399 ;	Source/Std_Lib/Src/stm8s_uart1.c: 245: UART1->CR1 &= (uint8_t)(~itpos);
      00020C 03 02            [ 1]  400 	cpl	(0x02, sp)
                                    401 ;	Source/Std_Lib/Src/stm8s_uart1.c: 243: if (uartreg == 0x01)
      00020E 0D 01            [ 1]  402 	tnz	(0x01, sp)
      000210 27 0A            [ 1]  403 	jreq	00111$
                                    404 ;	Source/Std_Lib/Src/stm8s_uart1.c: 245: UART1->CR1 &= (uint8_t)(~itpos);
      000212 C6 52 34         [ 1]  405 	ld	a, 0x5234
      000215 14 02            [ 1]  406 	and	a, (0x02, sp)
      000217 C7 52 34         [ 1]  407 	ld	0x5234, a
      00021A 20 15            [ 2]  408 	jra	00116$
      00021C                        409 00111$:
                                    410 ;	Source/Std_Lib/Src/stm8s_uart1.c: 247: else if (uartreg == 0x02)
      00021C 4D               [ 1]  411 	tnz	a
      00021D 27 0A            [ 1]  412 	jreq	00108$
                                    413 ;	Source/Std_Lib/Src/stm8s_uart1.c: 249: UART1->CR2 &= (uint8_t)(~itpos);
      00021F C6 52 35         [ 1]  414 	ld	a, 0x5235
      000222 14 02            [ 1]  415 	and	a, (0x02, sp)
      000224 C7 52 35         [ 1]  416 	ld	0x5235, a
      000227 20 08            [ 2]  417 	jra	00116$
      000229                        418 00108$:
                                    419 ;	Source/Std_Lib/Src/stm8s_uart1.c: 253: UART1->CR4 &= (uint8_t)(~itpos);
      000229 C6 52 37         [ 1]  420 	ld	a, 0x5237
      00022C 14 02            [ 1]  421 	and	a, (0x02, sp)
      00022E C7 52 37         [ 1]  422 	ld	0x5237, a
      000231                        423 00116$:
                                    424 ;	Source/Std_Lib/Src/stm8s_uart1.c: 257: }
      000231 85               [ 2]  425 	popw	x
      000232 81               [ 4]  426 	ret
                                    427 ;	Source/Std_Lib/Src/stm8s_uart1.c: 451: uint8_t UART1_ReceiveData8(void)
                                    428 ;	-----------------------------------------
                                    429 ;	 function UART1_ReceiveData8
                                    430 ;	-----------------------------------------
      000233                        431 _UART1_ReceiveData8:
                                    432 ;	Source/Std_Lib/Src/stm8s_uart1.c: 453: return ((uint8_t)UART1->DR);
      000233 C6 52 31         [ 1]  433 	ld	a, 0x5231
                                    434 ;	Source/Std_Lib/Src/stm8s_uart1.c: 454: }
      000236 81               [ 4]  435 	ret
                                    436 ;	Source/Std_Lib/Src/stm8s_uart1.c: 474: void UART1_SendData8(uint8_t Data)
                                    437 ;	-----------------------------------------
                                    438 ;	 function UART1_SendData8
                                    439 ;	-----------------------------------------
      000237                        440 _UART1_SendData8:
                                    441 ;	Source/Std_Lib/Src/stm8s_uart1.c: 477: UART1->DR = Data;
      000237 AE 52 31         [ 2]  442 	ldw	x, #0x5231
      00023A 7B 03            [ 1]  443 	ld	a, (0x03, sp)
      00023C F7               [ 1]  444 	ld	(x), a
                                    445 ;	Source/Std_Lib/Src/stm8s_uart1.c: 478: }
      00023D 81               [ 4]  446 	ret
                                    447 ;	Source/Std_Lib/Src/stm8s_uart1.c: 568: FlagStatus UART1_GetFlagStatus(UART1_Flag_TypeDef UART1_FLAG)
                                    448 ;	-----------------------------------------
                                    449 ;	 function UART1_GetFlagStatus
                                    450 ;	-----------------------------------------
      00023E                        451 _UART1_GetFlagStatus:
      00023E 52 03            [ 2]  452 	sub	sp, #3
                                    453 ;	Source/Std_Lib/Src/stm8s_uart1.c: 577: if (UART1_FLAG == UART1_FLAG_LBDF)
      000240 16 06            [ 2]  454 	ldw	y, (0x06, sp)
      000242 17 01            [ 2]  455 	ldw	(0x01, sp), y
                                    456 ;	Source/Std_Lib/Src/stm8s_uart1.c: 579: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000244 7B 07            [ 1]  457 	ld	a, (0x07, sp)
      000246 6B 03            [ 1]  458 	ld	(0x03, sp), a
                                    459 ;	Source/Std_Lib/Src/stm8s_uart1.c: 577: if (UART1_FLAG == UART1_FLAG_LBDF)
      000248 1E 01            [ 2]  460 	ldw	x, (0x01, sp)
      00024A A3 02 10         [ 2]  461 	cpw	x, #0x0210
      00024D 26 0E            [ 1]  462 	jrne	00114$
                                    463 ;	Source/Std_Lib/Src/stm8s_uart1.c: 579: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00024F C6 52 37         [ 1]  464 	ld	a, 0x5237
      000252 14 03            [ 1]  465 	and	a, (0x03, sp)
      000254 27 04            [ 1]  466 	jreq	00102$
                                    467 ;	Source/Std_Lib/Src/stm8s_uart1.c: 582: status = SET;
      000256 A6 01            [ 1]  468 	ld	a, #0x01
      000258 20 23            [ 2]  469 	jra	00115$
      00025A                        470 00102$:
                                    471 ;	Source/Std_Lib/Src/stm8s_uart1.c: 587: status = RESET;
      00025A 4F               [ 1]  472 	clr	a
      00025B 20 20            [ 2]  473 	jra	00115$
      00025D                        474 00114$:
                                    475 ;	Source/Std_Lib/Src/stm8s_uart1.c: 590: else if (UART1_FLAG == UART1_FLAG_SBK)
      00025D 1E 01            [ 2]  476 	ldw	x, (0x01, sp)
      00025F A3 01 01         [ 2]  477 	cpw	x, #0x0101
      000262 26 0E            [ 1]  478 	jrne	00111$
                                    479 ;	Source/Std_Lib/Src/stm8s_uart1.c: 592: if ((UART1->CR2 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000264 C6 52 35         [ 1]  480 	ld	a, 0x5235
      000267 14 03            [ 1]  481 	and	a, (0x03, sp)
      000269 27 04            [ 1]  482 	jreq	00105$
                                    483 ;	Source/Std_Lib/Src/stm8s_uart1.c: 595: status = SET;
      00026B A6 01            [ 1]  484 	ld	a, #0x01
      00026D 20 0E            [ 2]  485 	jra	00115$
      00026F                        486 00105$:
                                    487 ;	Source/Std_Lib/Src/stm8s_uart1.c: 600: status = RESET;
      00026F 4F               [ 1]  488 	clr	a
      000270 20 0B            [ 2]  489 	jra	00115$
      000272                        490 00111$:
                                    491 ;	Source/Std_Lib/Src/stm8s_uart1.c: 605: if ((UART1->SR & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000272 C6 52 30         [ 1]  492 	ld	a, 0x5230
      000275 14 03            [ 1]  493 	and	a, (0x03, sp)
      000277 27 03            [ 1]  494 	jreq	00108$
                                    495 ;	Source/Std_Lib/Src/stm8s_uart1.c: 608: status = SET;
      000279 A6 01            [ 1]  496 	ld	a, #0x01
                                    497 ;	Source/Std_Lib/Src/stm8s_uart1.c: 613: status = RESET;
      00027B 21                     498 	.byte 0x21
      00027C                        499 00108$:
      00027C 4F               [ 1]  500 	clr	a
      00027D                        501 00115$:
                                    502 ;	Source/Std_Lib/Src/stm8s_uart1.c: 617: return status;
                                    503 ;	Source/Std_Lib/Src/stm8s_uart1.c: 618: }
      00027D 5B 03            [ 2]  504 	addw	sp, #3
      00027F 81               [ 4]  505 	ret
                                    506 ;	Source/Std_Lib/Src/stm8s_uart1.c: 675: ITStatus UART1_GetITStatus(UART1_IT_TypeDef UART1_IT)
                                    507 ;	-----------------------------------------
                                    508 ;	 function UART1_GetITStatus
                                    509 ;	-----------------------------------------
      000280                        510 _UART1_GetITStatus:
      000280 52 04            [ 2]  511 	sub	sp, #4
                                    512 ;	Source/Std_Lib/Src/stm8s_uart1.c: 687: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      000282 7B 08            [ 1]  513 	ld	a, (0x08, sp)
      000284 97               [ 1]  514 	ld	xl, a
      000285 A4 0F            [ 1]  515 	and	a, #0x0f
      000287 88               [ 1]  516 	push	a
      000288 A6 01            [ 1]  517 	ld	a, #0x01
      00028A 6B 02            [ 1]  518 	ld	(0x02, sp), a
      00028C 84               [ 1]  519 	pop	a
      00028D 4D               [ 1]  520 	tnz	a
      00028E 27 05            [ 1]  521 	jreq	00162$
      000290                        522 00161$:
      000290 08 01            [ 1]  523 	sll	(0x01, sp)
      000292 4A               [ 1]  524 	dec	a
      000293 26 FB            [ 1]  525 	jrne	00161$
      000295                        526 00162$:
                                    527 ;	Source/Std_Lib/Src/stm8s_uart1.c: 689: itmask1 = (uint8_t)((uint8_t)UART1_IT >> (uint8_t)4);
      000295 9F               [ 1]  528 	ld	a, xl
      000296 4E               [ 1]  529 	swap	a
      000297 A4 0F            [ 1]  530 	and	a, #0x0f
                                    531 ;	Source/Std_Lib/Src/stm8s_uart1.c: 691: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      000299 88               [ 1]  532 	push	a
      00029A A6 01            [ 1]  533 	ld	a, #0x01
      00029C 6B 03            [ 1]  534 	ld	(0x03, sp), a
      00029E 84               [ 1]  535 	pop	a
      00029F 4D               [ 1]  536 	tnz	a
      0002A0 27 05            [ 1]  537 	jreq	00164$
      0002A2                        538 00163$:
      0002A2 08 02            [ 1]  539 	sll	(0x02, sp)
      0002A4 4A               [ 1]  540 	dec	a
      0002A5 26 FB            [ 1]  541 	jrne	00163$
      0002A7                        542 00164$:
                                    543 ;	Source/Std_Lib/Src/stm8s_uart1.c: 695: if (UART1_IT == UART1_IT_PE)
      0002A7 16 07            [ 2]  544 	ldw	y, (0x07, sp)
      0002A9 17 03            [ 2]  545 	ldw	(0x03, sp), y
      0002AB 93               [ 1]  546 	ldw	x, y
      0002AC A3 01 00         [ 2]  547 	cpw	x, #0x0100
      0002AF 26 18            [ 1]  548 	jrne	00117$
                                    549 ;	Source/Std_Lib/Src/stm8s_uart1.c: 698: enablestatus = (uint8_t)((uint8_t)UART1->CR1 & itmask2);
      0002B1 C6 52 34         [ 1]  550 	ld	a, 0x5234
      0002B4 14 02            [ 1]  551 	and	a, (0x02, sp)
      0002B6 97               [ 1]  552 	ld	xl, a
                                    553 ;	Source/Std_Lib/Src/stm8s_uart1.c: 701: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      0002B7 C6 52 30         [ 1]  554 	ld	a, 0x5230
      0002BA 14 01            [ 1]  555 	and	a, (0x01, sp)
      0002BC 27 08            [ 1]  556 	jreq	00102$
      0002BE 9F               [ 1]  557 	ld	a, xl
      0002BF 4D               [ 1]  558 	tnz	a
      0002C0 27 04            [ 1]  559 	jreq	00102$
                                    560 ;	Source/Std_Lib/Src/stm8s_uart1.c: 704: pendingbitstatus = SET;
      0002C2 A6 01            [ 1]  561 	ld	a, #0x01
      0002C4 20 37            [ 2]  562 	jra	00118$
      0002C6                        563 00102$:
                                    564 ;	Source/Std_Lib/Src/stm8s_uart1.c: 709: pendingbitstatus = RESET;
      0002C6 4F               [ 1]  565 	clr	a
      0002C7 20 34            [ 2]  566 	jra	00118$
      0002C9                        567 00117$:
                                    568 ;	Source/Std_Lib/Src/stm8s_uart1.c: 713: else if (UART1_IT == UART1_IT_LBDF)
      0002C9 1E 03            [ 2]  569 	ldw	x, (0x03, sp)
      0002CB A3 03 46         [ 2]  570 	cpw	x, #0x0346
      0002CE 26 18            [ 1]  571 	jrne	00114$
                                    572 ;	Source/Std_Lib/Src/stm8s_uart1.c: 716: enablestatus = (uint8_t)((uint8_t)UART1->CR4 & itmask2);
      0002D0 C6 52 37         [ 1]  573 	ld	a, 0x5237
      0002D3 14 02            [ 1]  574 	and	a, (0x02, sp)
      0002D5 97               [ 1]  575 	ld	xl, a
                                    576 ;	Source/Std_Lib/Src/stm8s_uart1.c: 718: if (((UART1->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
      0002D6 C6 52 37         [ 1]  577 	ld	a, 0x5237
      0002D9 14 01            [ 1]  578 	and	a, (0x01, sp)
      0002DB 27 08            [ 1]  579 	jreq	00106$
      0002DD 9F               [ 1]  580 	ld	a, xl
      0002DE 4D               [ 1]  581 	tnz	a
      0002DF 27 04            [ 1]  582 	jreq	00106$
                                    583 ;	Source/Std_Lib/Src/stm8s_uart1.c: 721: pendingbitstatus = SET;
      0002E1 A6 01            [ 1]  584 	ld	a, #0x01
      0002E3 20 18            [ 2]  585 	jra	00118$
      0002E5                        586 00106$:
                                    587 ;	Source/Std_Lib/Src/stm8s_uart1.c: 726: pendingbitstatus = RESET;
      0002E5 4F               [ 1]  588 	clr	a
      0002E6 20 15            [ 2]  589 	jra	00118$
      0002E8                        590 00114$:
                                    591 ;	Source/Std_Lib/Src/stm8s_uart1.c: 732: enablestatus = (uint8_t)((uint8_t)UART1->CR2 & itmask2);
      0002E8 C6 52 35         [ 1]  592 	ld	a, 0x5235
      0002EB 14 02            [ 1]  593 	and	a, (0x02, sp)
      0002ED 97               [ 1]  594 	ld	xl, a
                                    595 ;	Source/Std_Lib/Src/stm8s_uart1.c: 734: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      0002EE C6 52 30         [ 1]  596 	ld	a, 0x5230
      0002F1 14 01            [ 1]  597 	and	a, (0x01, sp)
      0002F3 27 07            [ 1]  598 	jreq	00110$
      0002F5 9F               [ 1]  599 	ld	a, xl
      0002F6 4D               [ 1]  600 	tnz	a
      0002F7 27 03            [ 1]  601 	jreq	00110$
                                    602 ;	Source/Std_Lib/Src/stm8s_uart1.c: 737: pendingbitstatus = SET;
      0002F9 A6 01            [ 1]  603 	ld	a, #0x01
                                    604 ;	Source/Std_Lib/Src/stm8s_uart1.c: 742: pendingbitstatus = RESET;
      0002FB 21                     605 	.byte 0x21
      0002FC                        606 00110$:
      0002FC 4F               [ 1]  607 	clr	a
      0002FD                        608 00118$:
                                    609 ;	Source/Std_Lib/Src/stm8s_uart1.c: 747: return  pendingbitstatus;
                                    610 ;	Source/Std_Lib/Src/stm8s_uart1.c: 748: }
      0002FD 5B 04            [ 2]  611 	addw	sp, #4
      0002FF 81               [ 4]  612 	ret
                                    613 ;	Source/Std_Lib/Src/stm8s_uart1.c: 775: void UART1_ClearITPendingBit(UART1_IT_TypeDef UART1_IT)
                                    614 ;	-----------------------------------------
                                    615 ;	 function UART1_ClearITPendingBit
                                    616 ;	-----------------------------------------
      000300                        617 _UART1_ClearITPendingBit:
                                    618 ;	Source/Std_Lib/Src/stm8s_uart1.c: 780: if (UART1_IT == UART1_IT_RXNE)
      000300 1E 03            [ 2]  619 	ldw	x, (0x03, sp)
      000302 A3 02 55         [ 2]  620 	cpw	x, #0x0255
      000305 26 05            [ 1]  621 	jrne	00102$
                                    622 ;	Source/Std_Lib/Src/stm8s_uart1.c: 782: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      000307 35 DF 52 30      [ 1]  623 	mov	0x5230+0, #0xdf
      00030B 81               [ 4]  624 	ret
      00030C                        625 00102$:
                                    626 ;	Source/Std_Lib/Src/stm8s_uart1.c: 787: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      00030C 72 19 52 37      [ 1]  627 	bres	21047, #4
                                    628 ;	Source/Std_Lib/Src/stm8s_uart1.c: 789: }
      000310 81               [ 4]  629 	ret
                                    630 	.area CODE
                                    631 	.area CONST
                                    632 	.area INITIALIZER
                                    633 	.area CABS (ABS)
